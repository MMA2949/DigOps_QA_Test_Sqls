/*issued count grid*/
WITH vitalDates AS (
    SELECT '2022-03-06'::DATE AS targetDate
),
aggs AS (
    SELECT COUNT(CASE WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH',vd.targetDate) AND vd.targetDate THEN lpf.policy_nr ELSE NULL END) mtd_actual
        , COUNT(CASE WHEN TIMESTAMPADD('YEAR',1,lpf.application_issue_dt) BETWEEN DATE_TRUNC('MONTH',vd.targetDate) AND vd.targetDate THEN lpf.policy_nr ELSE NULL END) py_mtd_actual
        , COUNT(CASE WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', vd.targetDate) AND vd.targetDate THEN lpf.policy_nr ELSE NULL END) ytd_actual
        , COUNT(CASE WHEN TIMESTAMPADD('YEAR',1,lpf.application_issue_dt) BETWEEN DATE_TRUNC('YEAR', vd.targetDate) AND vd.targetDate THEN lpf.policy_nr ELSE NULL END) py_ytd_actual
FROM edw_new_business_vw.fact_life_policy_vw         lpf

--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw  isd ON isd.calendar_dt = lpf.application_issue_dt
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
LEFT OUTER JOIN vitalDates                       vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
      )SELECT mtd_actual
        , ROUND(((mtd_actual - py_mtd_actual) / NULLIFZERO(py_mtd_actual))*100,2) AS mtd_vs_py
        , ytd_actual
        , ROUND(((ytd_actual - py_ytd_actual) / NULLIFZERO(py_ytd_actual))*100,2) AS ytd_vs_py
        FROM aggs;


/*Issued premium grid*/
WITH vitalDates AS (
    SELECT '2022-03-06'::DATE AS targetDate ),
aggs AS (
    SELECT SUM(CASE WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH',vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) mtd_actual
        , SUM(CASE WHEN TIMESTAMPADD('YEAR',1,lpf.application_issue_dt) BETWEEN DATE_TRUNC('MONTH',vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) py_mtd_actual
        , SUM(CASE WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) ytd_actual
        , SUM(CASE WHEN TIMESTAMPADD('YEAR',1, lpf.application_issue_dt) BETWEEN DATE_TRUNC('YEAR', vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) py_ytd_actual
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw  isd ON isd.calendar_dt = lpf.application_issue_dt
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
LEFT OUTER JOIN vitalDates                       vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
--and lpf.AGCY_AFFLTN_ID not in (250, 256)
--and lpf.distributor_channel_cde in ('MMFA','MMSD')
--and chan.channel_nm in ('Coverpath','MMDirect')
-- and f.agency_id = '003'
-- and st.state_cde = 'AK
)
SELECT ROUND(mtd_actual/1000000,2) as mtd_actual
    , ROUND(((mtd_actual - py_mtd_actual) / py_mtd_actual)*100,2)  AS mtd_vs_py
    , ROUND(ytd_actual/1000000,2) as ytd_actual 
    , ROUND(((ytd_actual - py_ytd_actual) / py_ytd_actual)*100,2)  AS ytd_vs_py
FROM aggs;    


/*Issued Count Graph*/
WITH vitalDates AS (
    SELECT '2022-03-06'::DATE AS targetDate
),
aggs AS (SELECT DATE_PART('YEAR',lpf.application_issue_dt) AS issuedYear
        , DATE_PART('MONTH',lpf.application_issue_dt) AS issuedMonth
        , COUNT(lpf.policy_nr) actual
        FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw  isd ON isd.calendar_dt = lpf.application_issue_dt 
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid         
LEFT OUTER JOIN vitalDates                       vd ON 1=1
                 WHERE prod.product_type_cde <> 'ROP'
            and lpf.application_type_nm <> 'Informal'
                 AND  lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND vd.targetDate
    GROUP BY 1,2)
SELECT issuedYear
    , issuedMonth
    , actual
FROM aggs
ORDER BY 1,2;


/*issued premium Graph*/
WITH vitalDates AS (
    SELECT '2022-03-06'::DATE AS targetDate
),
aggs AS (
    SELECT DATE_PART('YEAR',lpf.application_issue_dt) AS issuedYear
        , DATE_PART('MONTH',lpf.application_issue_dt) AS issuedMonth
        , SUM(lpf.annualized_premium_amt ) actual
        FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw  isd ON isd.calendar_dt = lpf.calendar_dt 
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid         
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
AND  lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND vd.targetDate
    GROUP BY 1,2
)
SELECT issuedYear
    , issuedMonth
    , actual
FROM aggs;  


/*Issued Premium,count by Product MTD*/
WITH vitalDates AS (
SELECT '2022-03-07'::DATE AS targetDate
),
aggs AS (
SELECT prod.product_type_cde AS product
, DATE_TRUNC('MONTH', lpf.application_issue_dt) AS submitPeriod
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw  isd ON isd.calendar_dt = lpf.application_issue_dt
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid 
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid        
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
AND ( lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2, vd.targetDate)) AND vd.targetDate
AND DATE_PART('MONTH', lpf.application_issue_dt) = DATE_PART('MONTH', vd.targetDate)
AND DATE_PART('DAY', lpf.application_issue_dt) <= DATE_PART('DAY', vd.targetDate))
GROUP BY 1,2
)
SELECT product
, submitPeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 1,2;  


/*Issued Count,premium by Product YTD*/
WITH vitalDates AS (
SELECT '2022-03-07'::DATE AS targetDate
),
aggs AS (
SELECT prod.product_type_cde AS product
, DATE_TRUNC('YEAR', lpf.application_issue_dt) AS issuedPeriod
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt ) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw  isd ON isd.calendar_dt = lpf.application_issue_dt
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid         
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
AND ( lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2, vd.targetDate)) AND vd.targetDate
AND CASE
WHEN DATE_PART('YEAR',  lpf.application_issue_dt) % 4 = 0
AND DATE_PART('DOY',  lpf.application_issue_dt) >= 60
THEN DATE_PART('DOY', lpf.application_issue_dt) - 1
ELSE DATE_PART('DOY',  lpf.application_issue_dt)
END <= DATE_PART('DOY', vd.targetDate))
GROUP BY 1,2
)
SELECT product
, issuedPeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 1,2;

/*Issued Count,premium by Product Code YTD*/
WITH vitalDates AS (
    SELECT '2022-03-07'::DATE AS targetDate
),
aggs AS (
    SELECT  prod.product_type_cde  AS product 
        , DATE_TRUNC('YEAR',lpf.application_issue_dt) AS issuedPeriod
        , COUNT(lpf.policy_nr) AS actualCount
        , SUM(lpf.annualized_premium_amt) AS actualPremium
   FROM edw_new_business_vw.fact_life_policy_vw         lpf
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid         
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		 f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   isd ON isd.calendar_dt = lpf.application_issue_dt
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
        LEFT OUTER JOIN vitalDates                       vd ON 1=1
    WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
        AND ( lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2, vd.targetDate)) AND vd.targetDate
            AND CASE 
                    WHEN DATE_PART('YEAR', lpf.application_issue_dt) % 4 = 0 
                        AND DATE_PART('DOY', lpf.application_issue_dt) >= 60 
                    THEN DATE_PART('DOY',lpf.application_issue_dt) - 1      
                    ELSE DATE_PART('DOY', lpf.application_issue_dt)          
                END <= DATE_PART('DOY', vd.targetDate))
            GROUP BY 1,2
)
SELECT product
    , issuedPeriod
    , actualCount
    , actualPremium
FROM aggs
ORDER BY 1,2;




/*Issued Count,premium by Product Code MTD*/
WITH vitalDates AS (
    SELECT '2022-03-07'::DATE AS targetDate
),
aggs AS (
    SELECT  prod.product_type_cde  AS product 
        , DATE_TRUNC('MONTH', lpf.application_issue_dt) AS issuedPeriod 
        , COUNT(lpf.policy_nr) AS actualCount
        , SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid         
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		 f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   isd ON isd.calendar_dt = lpf.application_issue_dt
        LEFT OUTER JOIN vitalDates                       vd ON 1=1
 WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
            AND ( lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2, vd.targetDate)) AND vd.targetDate
            AND DATE_PART('MONTH', lpf.application_issue_dt) = DATE_PART('MONTH', vd.targetDate) 
            AND DATE_PART('DAY', lpf.application_issue_dt) <= DATE_PART('DAY', vd.targetDate))   
       GROUP BY 1,2
)
SELECT product
    , issuedPeriod
    , actualCount
    , actualPremium
FROM aggs
ORDER BY 1,2;



--amount at risk
--mtd/ytd/rolling 12 submitted count by amount at risk bands for past 3 years
WITH vitalDates AS (
SELECT '2022-04-04'::DATE AS targetDate
),
aggs AS (
SELECT 
case when ar.band_range_type_nm = 'Amount At Risk Band' then ar.band_range_val  end as  AmountAtRiskBand  --Amount At Risk Band
, DATE_TRUNC('YEAR',  lpf.application_issue_dt) AS issuedPeriod --for ytd
--, DATE_TRUNC('MONTH',  lpf.application_issue_dt) AS issuedPeriod --for mtd
/*, CASE
WHEN  lpf.application_issue_dt BETWEEN TIMESTAMPADD('YEAR',-1,vd.targetDate)+1 AND vd.targetDate THEN 'Current 12 mo'
WHEN lpf.application_issue_dt BETWEEN TIMESTAMPADD('YEAR',-2,vd.targetDate)+1 AND TIMESTAMPADD('YEAR',-1,vd.targetDate) THEN 'Prior 12 mo'
END AS submitPeriod --for rolling 12*/
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   i ON i.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid         
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   ar ON ar.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_risk_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw   wp ON wp.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		 f on f.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   isd ON isd.calendar_dt =  lpf.application_issue_dt
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
AND ( lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2, vd.targetDate)) AND vd.targetDate --for ytd
AND CASE
WHEN DATE_PART('YEAR',  lpf.application_issue_dt) % 4 = 0 --check if it's a leap year
AND DATE_PART('DOY',lpf.application_issue_dt) >= 60 --check if it's past Feb 29 which is day 60 of the year
THEN DATE_PART('DOY', lpf.application_issue_dt) - 1 --check against the submit date day of year minus a day
ELSE DATE_PART('DOY',  lpf.application_issue_dt) --else, just use the day of year
END <= DATE_PART('DOY', vd.targetDate)) --for ytd; up to same point in year
/* AND ( isd.calendar_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2, vd.targetDate)) AND vd.targetDate --for mtd
AND DATE_PART('MONTH',  lpf.application_issue_dt) = DATE_PART('MONTH', vd.targetDate) --for mtd, too; ensure it's the month
AND DATE_PART('DAY', lpf.application_issue_dt) <= DATE_PART('DAY', vd.targetDate)) */ --for mtd, too; ensure it's within the same part of the month
--AND lpf.application_issue_dt BETWEEN TIMESTAMPADD('YEAR',-2, vd.targetDate)+1 AND vd.targetDate --for rolling 12
GROUP BY 1,2
)
SELECT CASE AmountAtRiskBand
WHEN '<$50,000' THEN 1
WHEN '$50,000-$249,999' THEN 2
WHEN '$250,000-$499,999' THEN 3
WHEN '$500,000' THEN 4
WHEN '$500,001-$1,000,000' THEN 5
WHEN '$1,000,001-$2,000,000' THEN 6
WHEN '$2,000,001-$3,000,000' THEN 7
WHEN '$3,000,001-$5,000,000' THEN 8
WHEN '$5,000,001-$9,999,999' THEN 9
WHEN '$10,000,000' THEN 10
WHEN '>$10,000,000' THEN 11
ELSE 15
END AS sortOrder
, AmountAtRiskBand
, issuedPeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 3,1;


--insured age MTD
--mtd/ytd/rolling 12 Issued premium by insured age bands for past 3 years
WITH vitalDates AS (
SELECT '2022-03-16'::DATE AS targetDate
),
aggs AS (
SELECT --ib.InsuredAgeBand
case when ib.band_range_type_nm = 'Insured Age Band' then ib.band_range_val end as InsuredAgeBand   --Insured Age Band (PII)
, CASE
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',0,vd.targetDate)) AND vd.targetDate THEN DATE_PART('YEAR',vd.targetDate)
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-1,vd.targetDate)) AND TIMESTAMPADD('YEAR',-1,vd.targetDate) THEN DATE_PART('YEAR',TIMESTAMPADD('YEAR',-1,vd.targetDate)+1)
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND TIMESTAMPADD('YEAR',-2,vd.targetDate) THEN DATE_PART('YEAR',TIMESTAMPADD('YEAR',-2,vd.targetDate)+1)
END AS IssuePeriod
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   isd ON isd.calendar_dt = lpf.application_issue_dt 
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  ib ON ib.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
and
(
(lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',0,vd.targetDate)) AND vd.targetDate) or
(lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-1,vd.targetDate)) AND TIMESTAMPADD('YEAR',-1,vd.targetDate)) or
(lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND TIMESTAMPADD('YEAR',-2,vd.targetDate))
)
GROUP BY 1,2
)
SELECT CASE InsuredAgeBand
WHEN '<4' THEN 1
WHEN '4-16' THEN 2
WHEN '17-40' THEN 3
WHEN '41-50' THEN 4
WHEN '51-60' THEN 5
WHEN '61-64' THEN 6
WHEN '65-70' THEN 7
WHEN '71-80' THEN 8
WHEN '>80' THEN 9
ELSE 10
END AS sortOrder
, InsuredAgeBand
, IssuePeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 3,1;







--Insured Age Band Rolling 12 Months
--mtd/ytd/rolling 12 submitted count by amount at risk bands for past 3 years
--mtd/ytd/rolling 12 submitted premium by amount at risk bands for past 3 years
WITH vitalDates AS (
SELECT '2022-08-15'::DATE AS targetDate
),
aggs AS (
SELECT --ib.InsuredAgeBand
case when ib.band_range_type_nm = 'Insured Age Band' then ib.band_range_val end as InsuredAgeBand   --Insured Age Band (PII)
, CASE
WHEN lpf.application_issue_dt BETWEEN TIMESTAMPADD('YEAR',-1,vd.targetDate)+1 AND vd.targetDate THEN 'Current 12 mo'
WHEN lpf.application_issue_dt  BETWEEN TIMESTAMPADD('YEAR',-2,vd.targetDate)+1 AND TIMESTAMPADD('YEAR',-1,vd.targetDate) THEN 'Prior 12 mo'
END AS IssuePeriod --for rolling 12
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   isd ON isd.calendar_dt = lpf.application_issue_dt 
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  ib ON ib.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
AND lpf.application_issue_dt BETWEEN TIMESTAMPADD('YEAR',-2, vd.targetDate)+1 AND vd.targetDate --for rolling 12
GROUP BY 1,2
)
SELECT CASE InsuredAgeBand
WHEN '<4' THEN 1
WHEN '4-16' THEN 2
WHEN '17-40' THEN 3
WHEN '41-50' THEN 4
WHEN '51-60' THEN 5
WHEN '61-64' THEN 6
WHEN '65-70' THEN 7
WHEN '71-80' THEN 8
WHEN '>80' THEN 9
ELSE 10
END AS sortOrder
, InsuredAgeBand
, IssuePeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 3,1;


--insured age MTD
--insured age
--mtd/ytd/rolling 12 Issued count by insured age bands for past 3 years
--mtd/ytd/rolling 12 Issued premium by insured age bands for past 3 years
WITH vitalDates AS (
SELECT '2022-03-16'::DATE AS targetDate
),
aggs AS (
SELECT --ib.InsuredAgeBand
ib.band_range_val as InsuredAgeBand
, CASE
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',0,vd.targetDate)) AND vd.targetDate THEN DATE_PART('YEAR',vd.targetDate)
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-1,vd.targetDate)) AND TIMESTAMPADD('YEAR',-1,vd.targetDate) THEN DATE_PART('YEAR',TIMESTAMPADD('YEAR',-1,vd.targetDate)+1)
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND TIMESTAMPADD('YEAR',-2,vd.targetDate) THEN DATE_PART('YEAR',TIMESTAMPADD('YEAR',-2,vd.targetDate)+1)
END AS IssuePeriod
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   iss ON iss.calendar_dt = lpf.application_issue_dt 
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw              prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  ib ON ib.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
and ib.band_range_type_nm = 'Insured Age Band'
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
and((lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',0,vd.targetDate)) AND vd.targetDate) or
(lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-1,vd.targetDate)) AND TIMESTAMPADD('YEAR',-1,vd.targetDate)) or
(lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND TIMESTAMPADD('YEAR',-2,vd.targetDate))
)
GROUP BY 1,2
)
SELECT CASE InsuredAgeBand
WHEN '<4' THEN 1
WHEN '4-16' THEN 2
WHEN '17-40' THEN 3
WHEN '41-50' THEN 4
WHEN '51-60' THEN 5
WHEN '61-64' THEN 6
WHEN '65-70' THEN 7
WHEN '71-80' THEN 8
WHEN '>80' THEN 9
ELSE 10
END AS sortOrder
, InsuredAgeBand
, IssuePeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 3,1;
-------------------------------------------------------------------------------------------------------------------------------------------------
--Insured age YTD
--mtd/ytd/rolling 12 Issued count by insured age bands for past 3 years
--mtd/ytd/rolling 12 Issued premium by insured age bands for past 3 years
WITH vitalDates AS (
SELECT '2022-03-16'::DATE AS targetDate
),
aggs AS (
SELECT --ib.InsuredAgeBand
ib.band_range_val as InsuredAgeBand
, CASE
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',0,vd.targetDate)) AND vd.targetDate THEN DATE_PART('YEAR',vd.targetDate)
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-1,vd.targetDate)) AND TIMESTAMPADD('YEAR',-1,vd.targetDate) THEN DATE_PART('YEAR',TIMESTAMPADD('YEAR',-1,vd.targetDate)+1)
WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND TIMESTAMPADD('YEAR',-2,vd.targetDate) THEN DATE_PART('YEAR',TIMESTAMPADD('YEAR',-2,vd.targetDate)+1)
END AS IssuePeriod
, COUNT(lpf.policy_nr) AS actualCount
, SUM(lpf.annualized_premium_amt) AS actualPremium
FROM edw_new_business_vw.fact_life_policy_vw lpf
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   iss ON iss.calendar_dt = lpf.application_issue_dt 
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw              prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid = lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  ib ON ib.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
and ib.band_range_type_nm = 'Insured Age Band'
LEFT OUTER JOIN vitalDates vd ON 1=1
WHERE prod.product_type_cde <> 'ROP'
and lpf.application_type_nm <> 'Informal'
and((lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',0,vd.targetDate)) AND vd.targetDate) or
(lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-1,vd.targetDate)) AND TIMESTAMPADD('YEAR',-1,vd.targetDate)) or
(lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', TIMESTAMPADD('YEAR',-2,vd.targetDate)) AND TIMESTAMPADD('YEAR',-2,vd.targetDate))
)GROUP BY 1,2
)
SELECT CASE InsuredAgeBand
WHEN '<4' THEN 1
WHEN '4-16' THEN 2
WHEN '17-40' THEN 3
WHEN '41-50' THEN 4
WHEN '51-60' THEN 5
WHEN '61-64' THEN 6
WHEN '65-70' THEN 7
WHEN '71-80' THEN 8
WHEN '>80' THEN 9
ELSE 10
END AS sortOrder
, InsuredAgeBand
, IssuePeriod
, actualCount
, actualPremium
FROM aggs
ORDER BY 3,1;


--firms
--mtd/ytd/rolling 12 submitted count by premium bucket and firm zip code
WITH vitalDates AS (
SELECT '2022-09-24'::DATE AS targetDate
),
aggs AS (
SELECT age.agency_nm AS firm
, age.agency_id AS firmNumber
, LEFT(age.zip_cde, 5) AS firmPostalCode
, SUM(CASE WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('MONTH',vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) AS mtd_actual
, SUM(CASE WHEN lpf.application_issue_dt BETWEEN DATE_TRUNC('YEAR', vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) AS ytd_actual
, SUM(CASE WHEN lpf.application_issue_dt BETWEEN TIMESTAMPADD('YEAR',-1,vd.targetDate) AND vd.targetDate THEN lpf.annualized_premium_amt ELSE NULL END) AS rolling_12_mo
FROM edw_new_business_vw.fact_life_policy_vw         lpf
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw 		     prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw  ib ON ib.ref_non_standard_band_range_natural_key_hash_uuid = lpf.ref_non_standard_insured_age_band_natural_key_hash_uuid
 LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_band_range_vw wp ON lpf.ref_non_standard_weighted_premium_band_natural_key_hash_uuid = wp.ref_non_standard_band_range_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw   		 age on age.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
--LEFT OUTER JOIN edw_bi_analytics_vw.dim_date_vw   isd ON isd.calendar_dt = lpf.application_issue_dt
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuid
LEFT JOIN vitalDates vd ON 1=1
where application_issue_dt between '20220801' and '20220924' --current
and prod.product_type_cde <> 'ROP'
AND lpf.application_issue_dt >= TIMESTAMPADD('YEAR', -1, vd.targetDate)
and lpf.application_type_nm <> 'Informal'
GROUP BY 1,2,3
)
SELECT agg.firm
, agg.firmNumber
, agg.firmPostalCode
, agg.mtd_actual
, agg.ytd_actual
, agg.rolling_12_mo
FROM aggs agg
WHERE COALESCE(mtd_actual, ytd_actual, rolling_12_mo) IS NOT NULL
ORDER BY 1;


/*-- IVA data grid*/
--alphabetical order
WITH vitalDates AS (
SELECT '2022-06-15'::DATE AS targetDate
)
SELECT
lpf.total_risk_amt --Amount At Risk
,case when aar.band_range_type_nm = 'Amount At Risk Band' then aar.band_range_val end as AmountAtRiskBand
--, aar.band_range_val as AmountAtRiskBand
, lpf.application_type_nm --Application Type
, lpf.aps_ind --APS Indicator, st.state_cde  --Contract State
, lpf.application_received_dt AS DateApplicationReceived
, lpf.application_signed_dt AS DateApplicationSigned
, lpf.application_declined_dt AS DateDeclined
, lpf.first_final_action_dt AS DateFirstFinalAction
, lpf.application_not_taken_dt AS DateIncompleted
, lpf.application_issue_dt AS DateIssued
, lpf.last_final_action_dt AS DateLastFinalAction
, lpf.application_approval_dt
, lpf.reporting_status_dt AS DatePolicyStatus
, lpf.application_report_dt AS DateReported
, lpf.application_submit_dt AS DateSubmitted
, lpf.application_withdrawal_dt AS DateWithdrawn
, lpf.distributor_channel_cde AS Distribution_Channel--lpf.lp.electronic_signed_ind  as ESignIndicator
, lpf.face_amt --Face Amount
,case when aar.band_range_type_nm = 'Weighted Premium Band' then aar.band_range_val end as WeightedPremiumBand
--, lpf.FaceAmountBand --Face Amount Band
, lpf.final_risk_class_nm as FinalRiskClass
, age.agency_nm AS firmname
, age.agency_id AS firmNumber
,age.zip_cde  AS firmPostalCode
, lpf.first_final_action_nm as FirstFinalAction
, voltageaccessNum(lpf.insured_age_nr,'account_num') as Insuredage --Insured Age (PII)
--, ia.InsuredAgeBand --Insured Age Band (PII)
,case when aar.band_range_type_nm = 'Insured Age Band' then aar.band_range_val end as InsuredAgeBand   --Insured Age Band (PII)
, cu.last_nm            AS insured_last_nm
, cu.gender_cde         AS inusredgender
, CASE
WHEN lpf.annualized_premium_amt >= 50000 THEN 'Y'
ELSE 'N'
END AS largeCaseInd--Large Case Indicator
, lpf.last_final_action_nm as LastFinalAction
, lpf.source_system_id as OriginatingSystem
, chan.channel_nm AS Platform
, lpf.policy_nr --policy number
, lpf.reporting_status_nm as PolicyStatus
, prod.product_type_cde AS Product
, prod.product_nm AS ProductCode
, lpf.rider_ltc_ind as RiderLTC
, lpf.source_risk_cde as RiskClass
,lpf.society1851Indicator as society1851Indicator
, adv.full_nm AS SolicitingAdvisorName -- (PII)
,adv.business_partner_id AS SolicitingAdvisorType --(PII)
,lpf.agent_type as solicitingAdvisorType
, lpf.tobacco_class_nm --Tobacco ClassC
, ucv.first_nm ||','|| ucv.last_nm as UnderwriterFullName--(PII)
, ucv.mm_id as UnderwriterID
, ooo.associate_team_nm AS UnderwriterTeam
, lpf.underwriting_type_nm AS UnderwritingMethod
, lpf.annualized_premium_amt AS WeightedPremium
,case when aar.band_range_type_nm = 'Weighted Premium Band' then aar.band_range_val end as WeightedPremiumBand
FROM edw_new_business_vw.fact_life_policy_vw         lpf
--LEFT OUTER JOIN edw_ref_non_standard_vw.ref_non_standard_product_current_vw              prod ON prod.ref_non_standard_product_natural_key_hash_uuid = lpf.ref_non_standard_product_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_channel_nb_current_vw        chan on chan.dim_channel_natural_key_hash_uuid= lpf.dim_channel_natural_key_hash_uuid
--LEFT OUTER JOIN  edw_ref_non_standard_vw.ref_non_standard_band_range_vw ri on lpf.ref_non_standard_band_range_natural_key_hash_uuid = ri.ref_non_standard_risk_band_natural_key_hash_uuid  
LEFT OUTER JOIN  edw_ref_non_standard_vw.ref_non_standard_band_range_vw aar on aar.ref_non_standard_risk_band_natural_key_hash_uuid = lpf.ref_non_standard_band_range_natural_key_hash_uuid
--and aar.band_range_type_nm = 'Amount At Risk Band'
LEFT OUTER JOIN  edw_ref_non_standard_vw.ref_non_standard_band_range_vw fa on fa.ref_non_standard_face_amt_band_natural_key_hash_uuid = lpf.ref_non_standard_band_range_natural_key_hash_uuid
LEFT OUTER JOIN  edw_semantic_vw.sem_underwriter_nb_current_vw  ucv on lpf.dim_party_underwriter_natural_key_hash_uuid = ucv.dim_underwriter_natural_key_hash_uuid
LEFT OUTER JOIN edw_new_business_vw.dig_ops_customer_nb_current_vw  cu ON lpf.dim_customer_natural_key_hash_uuid = cu.dim_customer_natural_key_hash_uuid
--LEFT OUTER JOIN edw_semantic_vw.sem_agreement_nb_current_vw      acw on acw.dim_agreement_natural_key_hash_uuid = lpf.dim_agreement_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_advisor_nb_current_vw        adv on adv.dim_party_advisor_natural_key_hash_uuid = lpf.dim_party_advisor_natural_key_hash_uuid
LEFT OUTER JOIN edw_semantic_vw.sem_party_agency_nb_current_vw           age on age.dim_party_agency_natural_key_hash_uuid = lpf.soliciting_agency_dim_party_natural_key_hash_uuid
LEFT OUTER JOIN edw_vw.ref_state_current_vw st ON st.ref_state_natural_key_hash_uuid = lpf.ref_contract_state_natural_key_hash_uuidedw_semantic_vw.sem_underwriter_nb_current_vw
LEFT OUTER JOIN vitalDates vd ON 1=1
LEFT OUTER JOIN edw_bi_analytics_vw.dim_teams_out_of_office_history_vw ooo ON ooo.associate_id = voltageaccess(lpf.UnderwriterId, 'name' ) AND ooo.out_of_office_dt = CURRENT_DATE()
WHERE prod.product_type_cde <> 'ROP'
--AND prod.businessType <> 'Informal'
--and lpf.society1851Indicator = 'N'
AND lpf.application_issue_dt = vd.targetDate
ORDER BY lpf.policy_nr;



